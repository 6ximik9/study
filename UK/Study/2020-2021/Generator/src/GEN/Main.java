package GEN;

import java.util.Arrays;
import java.util.Collection;
import java.util.stream.IntStream;
import javax.swing.JOptionPane;

/**
 *
 * @author 7heXiMiK
 */
public class Main extends javax.swing.JFrame {

    int Gen[];
    int xMouse;
    int yMouse;
    int cou;
    int Min;
    int Max;
    int[] result;
    int[] copy;
    int end = 0;
    Generator g = null;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        this.setLocationRelativeTo(null);
        txtInfo.setEditable(false);
//        Generator passwordGenerator = new Generator.GeneratorBuilder()
//                .useDigits(true)
//                .build();
//        String password = Generator.generate(50, 0, 9);
//        String strArr[] = password.split(" ");
//        int numArr[] = new int[strArr.length];
//        for (int i = 0; i < strArr.length; i++) {
//            numArr[i] = Integer.parseInt(strArr[i]);
//            // System.out.println(numArr[i]);
//        }
//        System.out.println(Arrays.toString(numArr));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        pnlBody = new javax.swing.JPanel();
        pnlHead = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMax = new javax.swing.JTextField();
        txtMin = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtCount = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        ckUp = new javax.swing.JCheckBox();
        ckDown = new javax.swing.JCheckBox();
        ckRandom = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        ckOnRepeat = new javax.swing.JCheckBox();
        ckOffRepeat = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        pnlBody.setBackground(new java.awt.Color(72, 61, 139));

        pnlHead.setBackground(new java.awt.Color(244, 164, 96));
        pnlHead.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlHeadMouseDragged(evt);
            }
        });
        pnlHead.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlHeadMousePressed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(72, 61, 139));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Photo/close (2).png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Генератор послідовностей");

        javax.swing.GroupLayout pnlHeadLayout = new javax.swing.GroupLayout(pnlHead);
        pnlHead.setLayout(pnlHeadLayout);
        pnlHeadLayout.setHorizontalGroup(
            pnlHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHeadLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlHeadLayout.setVerticalGroup(
            pnlHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeadLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        txtInfo.setBackground(new java.awt.Color(175, 238, 238));
        txtInfo.setColumns(10);
        txtInfo.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        txtInfo.setLineWrap(true);
        txtInfo.setRows(4);
        jScrollPane1.setViewportView(txtInfo);

        jButton1.setBackground(new java.awt.Color(210, 105, 30));
        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton1.setText("Згенерувати");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Діапазон від");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("до");

        txtMax.setBackground(new java.awt.Color(72, 61, 139));
        txtMax.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtMax.setForeground(new java.awt.Color(255, 255, 255));
        txtMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxActionPerformed(evt);
            }
        });
        txtMax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMaxKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMaxKeyTyped(evt);
            }
        });

        txtMin.setBackground(new java.awt.Color(72, 61, 139));
        txtMin.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtMin.setForeground(new java.awt.Color(255, 255, 255));
        txtMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinActionPerformed(evt);
            }
        });
        txtMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMinKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMinKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Кількість чисел");

        txtCount.setBackground(new java.awt.Color(72, 61, 139));
        txtCount.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtCount.setForeground(new java.awt.Color(255, 255, 255));
        txtCount.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCountKeyTyped(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(72, 61, 139));

        buttonGroup1.add(ckUp);
        ckUp.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckUp.setText("За зростанням");

        buttonGroup1.add(ckDown);
        ckDown.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckDown.setText("За спаданням");

        buttonGroup1.add(ckRandom);
        ckRandom.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckRandom.setSelected(true);
        ckRandom.setText("Випадково");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ckUp)
                    .addComponent(ckDown)
                    .addComponent(ckRandom))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(ckUp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ckDown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ckRandom)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(72, 61, 139));

        buttonGroup2.add(ckOnRepeat);
        ckOnRepeat.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckOnRepeat.setSelected(true);
        ckOnRepeat.setText("Дозволити повтори");

        buttonGroup2.add(ckOffRepeat);
        ckOffRepeat.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        ckOffRepeat.setText("Заборонити повтори");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ckOnRepeat)
                    .addComponent(ckOffRepeat))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(ckOnRepeat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ckOffRepeat)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlBodyLayout = new javax.swing.GroupLayout(pnlBody);
        pnlBody.setLayout(pnlBodyLayout);
        pnlBodyLayout.setHorizontalGroup(
            pnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHead, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlBodyLayout.createSequentialGroup()
                        .addGroup(pnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlBodyLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlBodyLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBodyLayout.setVerticalGroup(
            pnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBodyLayout.createSequentialGroup()
                .addComponent(pnlHead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(pnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBodyLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBodyLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(29, 29, 29)))
                .addGroup(pnlBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBodyLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBodyLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBody, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pnlHeadMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlHeadMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_pnlHeadMousePressed
    /**
     * Початкова генерація
     *
     * @param countG Кількість
     * @param Min Мінімальне
     * @param Max Максимальне
     */
    void Generate(int countG, int Min, int Max) {
        Gen = new int[countG];
        for (int i = 0; i < countG; i++) {
            int x = Min + (int) (Math.random() * Max);
            // System.out.println(x);
            Gen[i] = x;
        }
    }


    private void pnlHeadMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlHeadMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);        // TODO add your handling code here:
    }//GEN-LAST:event_pnlHeadMouseDragged

    private void txtMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxActionPerformed

    private void txtMaxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaxKeyPressed

    }//GEN-LAST:event_txtMaxKeyPressed

    private void txtMaxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaxKeyTyped
        char c = evt.getKeyChar();
        if (txtMax.getText().trim().length() == 0) {
            if (c == '0') {
                evt.consume();
            }
        }
        if (((c < '0') || (c > '9') || txtMax.getText().length() >= 5)) {
            evt.consume();  // игнорим введенные буквы и пробел
        }
    }//GEN-LAST:event_txtMaxKeyTyped

    private void txtMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinActionPerformed

    private void txtMinKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinKeyPressed

    private void txtMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMinKeyTyped
        char c = evt.getKeyChar();

        if (((c < '0') || (c > '9') || txtMin.getText().length() >= 5)) {
            if (end == 0) {
                evt.consume();  // игнорим введенные буквы и пробел
            }
        }


    }//GEN-LAST:event_txtMinKeyTyped

    private void txtCountKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCountKeyTyped
        char c = evt.getKeyChar();
        if (txtCount.getText().trim().length() == 0) {
            if (c == '0') {
                evt.consume();
            }
        }
        if (((c < '0') || (c > '9') || txtCount.getText().length() >= 5)) {
            evt.consume();  // игнорим введенные буквы и пробел
        }

    }//GEN-LAST:event_txtCountKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        txtInfo.setText(null);
        if (txtCount.getText().trim().length() > 0) {

            if (Integer.parseInt(txtCount.getText()) <= 5000) {
                int rand = 0;

                cou = Integer.parseInt(txtCount.getText());
                if (txtMin.getText() == "0") {
                } else if (txtMin.getText().trim().length() > 1) {
                    // txtMin.getText().replaceFirst("^0*", "");
                    txtMin.setText(txtMin.getText().replaceFirst("^0*", ""));
                }
                Max = Integer.parseInt(txtMax.getText());
                try {
                    Min = Integer.parseInt(txtMin.getText());

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(rootPane, "Помилка вхідних данних, перевірте правильність мінімального числа");
                    Min = 0;
                    txtMin.setText("0");

                }
                rand = Integer.parseInt(txtMax.getText()) - Integer.parseInt(txtMin.getText());
                Generate(Integer.parseInt(txtCount.getText()), Integer.parseInt(txtMin.getText()), Integer.parseInt(txtMax.getText()));
                int low = 0;
                int high = cou;
                if (ckUp.isSelected()) {
                    if (ckOffRepeat.isSelected()) {
                        if (Integer.parseInt(txtCount.getText()) > rand) {
                            JOptionPane.showMessageDialog(rootPane, "Помилка вхідних данних, кількість числел має бути менше максимального значення");
                        } else {
                            removeDuplicates(Gen);
                            System.out.println(Arrays.toString(result));
                            if (Min == 0) {
                                do {
                                    if (getArrayCount(result, 0) > 1) {
                                        delN(1);
                                    } else {

                                    }
                                } while (getArrayCount(result, 0) > 1);
                            } else {
                                do {
                                    if (getArrayCount(result, 0) > 0) {
                                        delN(0);
                                    } else {

                                    }
                                } while (getArrayCount(result, 0) > 0);
                            }

                            SortDown(result);
                            for (int i = 0; i < high; i++) {
                                if (i == high - 1) {
                                    txtInfo.setText(txtInfo.getText() + result[i] + ".");
                                } else {
                                    txtInfo.setText(txtInfo.getText() + result[i] + ", ");
                                }
                            }
                        }
                    } else {
                        //quickSort(Gen, low, high - 1);
                        SortDown(Gen);
                        for (int i = 0; i < high; i++) {
                            if (i == high - 1) {
                                txtInfo.setText(txtInfo.getText() + Gen[i] + ".");
                            } else {
                                txtInfo.setText(txtInfo.getText() + Gen[i] + ", ");
                            }
                        }
                    }

                } else if (ckDown.isSelected()) {
                    if (ckOffRepeat.isSelected()) {
                        if (Integer.parseInt(txtCount.getText()) > rand) {
                            JOptionPane.showMessageDialog(rootPane, "Помилка вхідних данних, кількість числел має бути менше максимального значення");
                        } else {
                            removeDuplicates(Gen);
                            System.out.println(Arrays.toString(result));
                            do {
                                if (getArrayCount(result, 0) <= 1) {

                                } else {
                                    delN(0);
                                }
                            } while (getArrayCount(result, 0) > 1);
                            SortUp(result);
                            for (int i = 0; i < high; i++) {
                                if (i == high - 1) {
                                    txtInfo.setText(txtInfo.getText() + result[i] + ".");
                                } else {
                                    txtInfo.setText(txtInfo.getText() + result[i] + ", ");
                                }
                            }
                        }
                    } else {
                        SortUp(Gen);
                        for (int i = 0; i < cou; i++) {
                            if (i == cou - 1) {
                                txtInfo.setText(txtInfo.getText() + Gen[i] + ".");
                            } else {
                                txtInfo.setText(txtInfo.getText() + Gen[i] + ", ");
                            }
                        }
                    }

                } else if (ckRandom.isSelected()) {
                    if (ckOffRepeat.isSelected()) {
                        if (Integer.parseInt(txtCount.getText()) > rand) {
                            JOptionPane.showMessageDialog(rootPane, "Помилка вхідних данних, кількість числел має бути менше максимального значення");
                        } else {
                            removeDuplicates(Gen);
                            do {
                                if (getArrayCount(result, 0) > 1) {
                                    delN(1);
                                }
                            } while (getArrayCount(result, 0) > 1);
                            for (int i = 0; i < cou; i++) {
                                if (i == cou - 1) {
                                    txtInfo.setText(txtInfo.getText() + result[i] + ".");
                                } else {
                                    txtInfo.setText(txtInfo.getText() + result[i] + ", ");
                                }
                            }
                        }
                    } else {
                        Generate(Integer.parseInt(txtCount.getText()), Integer.parseInt(txtMin.getText()), Integer.parseInt(txtMax.getText()));
                        for (int i = 0; i < cou; i++) {
                            if (i == cou - 1) {
                                txtInfo.setText(txtInfo.getText() + Gen[i] + ".");
                            } else {
                                txtInfo.setText(txtInfo.getText() + Gen[i] + ", ");
                            }
                        }
                    }

                }
            } else if (Integer.parseInt(txtCount.getText()) > 5000) {
                JOptionPane.showMessageDialog(rootPane, "Помилка вхідних данних, кількість не повинна перевищювати 5000");
            }
        } else if (txtCount.getText().trim().length() < 0 || txtCount.getText() == null || txtCount.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Помилка вхідних данних, введіть кількість елементів");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Сортування від меншого до більшого
     *
     * @param intArray Масив для сортування
     */
    void SortUp(int intArray[]) {
        for (int j = 0; j < intArray.length - 1; j++) {
            for (int k = j + 1; k < intArray.length; k++) {
                if (intArray[j] < intArray[k]) {
                    int temp = intArray[k];
                    intArray[k] = intArray[j];
                    intArray[j] = temp;
                }
            }
        }
    }

    /**
     * Сортування від меншого до більшого
     *
     * @param intArray Масив для сортування
     */
    void SortDown(int intArray[]) {
        for (int j = 0; j < intArray.length - 1; j++) {
            for (int k = j + 1; k < intArray.length; k++) {
                if (intArray[j] > intArray[k]) {
                    int temp = intArray[k];
                    intArray[k] = intArray[j];
                    intArray[j] = temp;
                }
            }
        }
    }

    /**
     * Видалення виключень
     *
     * @param values Що видаляти
     */
    void removeDuplicates(int[] values) {
        boolean mask[] = new boolean[values.length];
        int removeCount = 0;

        for (int i = 0; i < values.length; i++) {
            if (!mask[i]) {
                int tmp = values[i];

                for (int j = i + 1; j < values.length; j++) {
                    if (tmp == values[j]) {
                        mask[j] = true;
                        removeCount++;
                    }
                }
            }
        }

        result = new int[values.length - removeCount];

        for (int i = 0, j = 0; i < values.length; i++) {
            if (!mask[i]) {
                result[j++] = values[i];
            }
        }
        int i = 2;

        if (result.length < cou) {
            int pr = cou - result.length;
            for (int z = 0; z < pr; z++) {
                copy = Arrays.copyOf(result, result.length);
                do {
                    int c = Min + (int) (Math.random() * Max);
                    boolean s = IntStream.of(copy).anyMatch(x -> x == c);
                    if (s == false && c != 0) {
                        result = Arrays.copyOf(copy, cou + 1);
                        result[cou - 1] = c;
                        i = 0;
                    }
                } while (i > 1);
            }
        }
    }

    /**
     * Видалення елементу
     *
     * @param n елемент
     */
    void delN(int n) {
        if (Min >= 0) {
            System.out.println("Кл 0 = " + getArrayCount(result, 0));
            for (int j = 0; j < getArrayCount(result, 0) - n; j++) {
                boolean NULL = IntStream.of(result).anyMatch(x -> x == 0);
                if (NULL == true) {
                    int num = getArrayIndex(result, 0);
                    if (num != -1) {
                        int b = 2;
                        do {
                            int c = Min + (int) (Math.random() * ((Max - Min) + 1));
                            System.out.println("замість 0 = " + c);
                            boolean g = IntStream.of(result).anyMatch(x -> x == c);
                            if (g == false && c != 0) {
                                result[num] = c;
                                b = 0;
                            }
                        } while (b > 0);
                    }
                }
            }
        }
    }

    /**
     * Отримання індексу елементу
     *
     * @param arr Масив
     * @param value Значення
     * @return індекс
     */
    int getArrayIndex(int[] arr, int value) {
        int k = 0;
        for (int i = 0; i < arr.length; i++) {

            if (arr[i] == value) {
                k = i;
                break;
            }
        }
        return k;
    }

    /**
     * Отримання кількості
     *
     * @param arr Масив
     * @param value Значення
     * @return кількість
     */
    int getArrayCount(int[] arr, int value) {
        int count = 0;
        for (int i = 0; i < arr.length; i++) {

            if (arr[i] == value) {
                count++;

            }
        }
        return count;
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox ckDown;
    private javax.swing.JCheckBox ckOffRepeat;
    private javax.swing.JCheckBox ckOnRepeat;
    private javax.swing.JCheckBox ckRandom;
    private javax.swing.JCheckBox ckUp;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlBody;
    private javax.swing.JPanel pnlHead;
    private javax.swing.JTextField txtCount;
    private javax.swing.JTextArea txtInfo;
    private javax.swing.JTextField txtMax;
    private javax.swing.JTextField txtMin;
    // End of variables declaration//GEN-END:variables
}
