/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DataBase;

import java.awt.image.ImageFilter;
import java.io.File;
import static java.util.Locale.filter;
import java.util.logging.Filter;
import javafx.stage.FileChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author 7heXiMiK
 */
public class InsertPerson extends javax.swing.JFrame {
Viev v= new Viev();
    

    /**
     * Creates new form Insert
     */
    public InsertPerson() {
        initComponents();
                
        this.setLocationRelativeTo(null);//center screen
        MoveMouseListener mml = new MoveMouseListener(pnlHead, this);
        pnlHead.addMouseListener(mml);
        pnlHead.addMouseMotionListener(mml);
        txtBiog.setLineWrap(true);
        start();
        System.out.println(v.getStart());
        if(v.getStart() == 1)
        {
            metod();
            btnAdd.setText("Оновити");
            
        }
        
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    /**
     * Метод який викликається коли людина хоче зробити редагування
     */
    private void metod()
    {
        
       JComboBoxBranch.select(v.getNameBranch());
       txtPib.setText(v.getName());
       chYear.select(v.getBornSplit(0));
       chMount.select(v.getBornSplit(1));
       chData.select(v.getBornSplit(2));
       chYearD.select(v.getDeadSplit(0));
       chMountD.select(v.getDeadSplit(1));
       chDataD.select(v.getDeadSplit(2));
       txtEducation.setText(v.getEducat());
       txtReligion.setText(v.getRel());
       txtBiog.setText(v.getBiog());
       if(v.getPathPhoto()!="")
        {
        lblPhoto.setText(v.getPathPhoto());
        }
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlPerson = new javax.swing.JPanel();
        txtPib = new javax.swing.JTextField();
        chYear = new java.awt.Choice();
        lblBorn = new javax.swing.JLabel();
        chMount = new java.awt.Choice();
        chData = new java.awt.Choice();
        chYearD = new java.awt.Choice();
        chMountD = new java.awt.Choice();
        chDataD = new java.awt.Choice();
        lblDead = new javax.swing.JLabel();
        txtReligion = new javax.swing.JTextField();
        txtEducation = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtBiog = new javax.swing.JTextArea();
        lblReligion = new javax.swing.JLabel();
        lblEducation = new javax.swing.JLabel();
        lbl_biog = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblPhoto = new javax.swing.JLabel();
        btnSetPath = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jBoxDead = new javax.swing.JCheckBox();
        jBoxBorn = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        pnlHead = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        JComboBoxBranch = new java.awt.Choice();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        pnlPerson.setBackground(new java.awt.Color(255, 255, 255));

        txtPib.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        chYear.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        lblBorn.setBackground(new java.awt.Color(0, 0, 0));
        lblBorn.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblBorn.setText("Дата народження (не обов'язково)");

        chMount.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        chData.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        chYearD.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        chMountD.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        chDataD.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        lblDead.setBackground(new java.awt.Color(0, 0, 0));
        lblDead.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblDead.setText("Дата смерті (не обов'язково)");

        txtReligion.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtEducation.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        txtBiog.setColumns(20);
        txtBiog.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtBiog.setRows(5);
        jScrollPane1.setViewportView(txtBiog);

        lblReligion.setBackground(new java.awt.Color(0, 0, 0));
        lblReligion.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblReligion.setText("Релігія");

        lblEducation.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblEducation.setText("Освіта");

        lbl_biog.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lbl_biog.setText("Коротка біографія");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Прізвище, ім’я, по батькові ");

        lblPhoto.setText("Виберіть фото");

        btnSetPath.setText("Обзор");
        btnSetPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetPathActionPerformed(evt);
            }
        });

        btnAdd.setText("Додати");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jBoxDead.setBackground(new java.awt.Color(255, 255, 255));
        jBoxDead.setText("Не вказувати");
        jBoxDead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBoxDeadActionPerformed(evt);
            }
        });

        jBoxBorn.setBackground(new java.awt.Color(255, 255, 255));
        jBoxBorn.setText("Не вказувати");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("До якої галузі відноситься людина?");

        pnlHead.setBackground(new java.awt.Color(141, 50, 187));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Photo/logout.png"))); // NOI18N
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pnlHeadLayout = new javax.swing.GroupLayout(pnlHead);
        pnlHead.setLayout(pnlHeadLayout);
        pnlHeadLayout.setHorizontalGroup(
            pnlHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHeadLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap())
        );
        pnlHeadLayout.setVerticalGroup(
            pnlHeadLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3)
        );

        JComboBoxBranch.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout pnlPersonLayout = new javax.swing.GroupLayout(pnlPerson);
        pnlPerson.setLayout(pnlPersonLayout);
        pnlPersonLayout.setHorizontalGroup(
            pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHead, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlPersonLayout.createSequentialGroup()
                .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPersonLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPersonLayout.createSequentialGroup()
                                .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSetPath, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlPersonLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlPersonLayout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlPersonLayout.createSequentialGroup()
                                                .addComponent(chYearD, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblReligion)
                                                    .addGroup(pnlPersonLayout.createSequentialGroup()
                                                        .addComponent(chMountD, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(chDataD, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jBoxDead))))
                                            .addComponent(txtReligion, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtEducation)
                                            .addGroup(pnlPersonLayout.createSequentialGroup()
                                                .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblBorn)
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(JComboBoxBranch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addGroup(pnlPersonLayout.createSequentialGroup()
                                        .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(pnlPersonLayout.createSequentialGroup()
                                                .addGap(29, 29, 29)
                                                .addComponent(lblDead))
                                            .addGroup(pnlPersonLayout.createSequentialGroup()
                                                .addGap(95, 95, 95)
                                                .addComponent(lblEducation)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(pnlPersonLayout.createSequentialGroup()
                                        .addComponent(chYear, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(chMount, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(chData, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                        .addComponent(jBoxBorn))))))
                    .addGroup(pnlPersonLayout.createSequentialGroup()
                        .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlPersonLayout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlPersonLayout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(jLabel1))
                                    .addComponent(txtPib, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(pnlPersonLayout.createSequentialGroup()
                                .addGap(93, 93, 93)
                                .addComponent(lbl_biog))
                            .addGroup(pnlPersonLayout.createSequentialGroup()
                                .addGap(64, 64, 64)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlPersonLayout.setVerticalGroup(
            pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPersonLayout.createSequentialGroup()
                .addComponent(pnlHead, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPib, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JComboBoxBranch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(lblBorn)
                .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPersonLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chData, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(chYear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(chMount, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlPersonLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jBoxBorn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDead)
                .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPersonLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chMountD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chYearD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chDataD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlPersonLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jBoxDead)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblReligion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtReligion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblEducation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEducation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_biog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSetPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPerson, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlPerson, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Метод для заповнення елементів дати, а також отримання інформації
     */
    void start()
    {
    for (int i = 1000; i < 2500; i++) {
            chYear.add("" + i + "");
            chYearD.add("" + i + "");
        }
        for (int i = 1; i < 10; i++) {
            chMount.add("0" + i + "");
            chMountD.add("0" + i + "");
        }
        chMount.add("10");
        chMount.add("11");
        chMount.add("12");
        chMountD.add("10");
        chMountD.add("11");
        chMountD.add("12");
        for (int i = 1; i < 10; i++) {
            chData.add("0" + i + "");
            chDataD.add("0" + i + "");
        }
        for (int i = 10; i < 32; i++) {
            chData.add("" + i + "");
            chDataD.add("" + i + "");
        }
        DB d = new DB();
        d.GetInfoBox("name_branch","branch", "");
        JComboBoxBranch.removeAll();
        for(int i=0;i<d.list.size();i++)
        {
            JComboBoxBranch.addItem(d.array[i]);
        }
    }
    
    /**
     * Вибір фото
     * @param evt 
     */
    private void btnSetPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetPathActionPerformed
        String file = "";
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "jpeg");
        chooser.setFileFilter(filter);
        File f = new File("Person");
        chooser.setCurrentDirectory(f);
        chooser.setDialogTitle("Будь ласка виберіть фото");
       // chooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            file = chooser.getSelectedFile().getName();
            lblPhoto.setText("Person\\"+file);
        }
    }//GEN-LAST:event_btnSetPathActionPerformed

    /**
     * Додавання/редагування даних
     * @param evt 
     */
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
      if(v.getStart() == 0)
      {
        
        String born = chYear.getSelectedItem()+ "-"+chMount.getSelectedItem()+"-"+chData.getSelectedItem();
        String dead = chYearD.getSelectedItem()+ "-"+chMountD.getSelectedItem()+"-"+chDataD.getSelectedItem();
        String Photo = lblPhoto.getText();
        DB d = new DB();
        
        if(txtPib.getText().trim().length()>0
           &&txtBiog.getText().trim().length()>0)
                {
                    if(txtPib.getText().trim().length()<=300&&txtReligion.getText().trim().length()<=100&&txtEducation.getText().trim().length()<=255 && txtBiog.getText().trim().length() < 16777215)
                    {
                    d.GetInfo("PIB", "personality",txtPib.getText());
                    if(d.getAddName()=="Такого нема")
                    {
                        int a = 0;  
                        if(lblPhoto.getText() == "Виберіть фото")
                        {
                          String[] btn = {"Так", "Ні"};
                        a= JOptionPane.showOptionDialog(rootPane, "Продовжити без фотографії?", "Вибір фотографії",
                         JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, btn, "OK");
                        }
                        if(a==0)
                        {
                            if(txtReligion.getText().trim().length()<=0){
                                txtReligion.setText("Невідома");
                            }
                            if(txtEducation.getText().trim().length()<=0){
                                txtEducation.setText("Невідома");
                            }
                        if(lblPhoto.getText() == "Виберіть фото")
                        {
                            Photo = "Відсутнє";
                        }
                        if(jBoxBorn.isSelected()&&jBoxDead.isSelected())
                        {
                            d.Getid("name_branch", "branch", (String) JComboBoxBranch.getSelectedItem());
                        d.personInsert("personality",""+d.getIdBranch()+"",txtPib.getText(), null, null, txtReligion.getText(), txtEducation.getText(), txtBiog.getText(), Photo);
                        JOptionPane.showMessageDialog(rootPane, "Успішно");
                        dispose();
                        v.Use();
                        }
                        else if(jBoxDead.isSelected())
                        {
                            d.Getid("name_branch", "branch", (String) JComboBoxBranch.getSelectedItem());
                        d.personInsert("personality",""+d.getIdBranch()+"",txtPib.getText(), born, null, txtReligion.getText(), txtEducation.getText(), txtBiog.getText(), Photo);
                        JOptionPane.showMessageDialog(rootPane, "Успішно");
                        dispose();
                        v.Use();
                        }
                        else if(jBoxBorn.isSelected())
                        {
                        d.Getid("name_branch", "branch", (String) JComboBoxBranch.getSelectedItem());
                        d.personInsert("personality",""+d.getIdBranch()+"",txtPib.getText(), null, dead, txtReligion.getText(), txtEducation.getText(), txtBiog.getText(), Photo);
                        JOptionPane.showMessageDialog(rootPane, "Успішно");
                       dispose();
                        v.Use();
                        }
                        else{
                        d.Getid("name_branch", "branch", (String) JComboBoxBranch.getSelectedItem());
                        d.personInsert("personality",""+d.getIdBranch()+"",txtPib.getText(), born, dead, txtReligion.getText(), txtEducation.getText(), txtBiog.getText(), Photo);
                        JOptionPane.showMessageDialog(rootPane, "Успішно");
                        dispose();
                        v.Use();
                        }
                    }
                        else{}
                    }
                    else{
                        JOptionPane.showMessageDialog(rootPane, "Така особистість вже існує");
                    }
                    }
                    else
                    {
                           JOptionPane.showMessageDialog(rootPane, "Введено багато символів, повторіть спробу");
                    
                    }
                    
                    
                }
        else{
                JOptionPane.showMessageDialog(rootPane, "Помилка даних");
        }
      }
      else
      {
          //////////Оновлення////////////////////
        btnAdd.setText("Оновити");
        String born = chYear.getSelectedItem()+ "-"+chMount.getSelectedItem()+"-"+chData.getSelectedItem();
        String dead = chYearD.getSelectedItem()+ "-"+chMountD.getSelectedItem()+"-"+chDataD.getSelectedItem();
        String Photo = lblPhoto.getText();
        DB d = new DB();

         if(d.getPhotoPatn()=="")
         {
            lblPhoto.setText(d.getPhotoPatn());
         }
        if(txtPib.getText().trim().length()>0&&txtBiog.getText().trim().length()>0)
                {
                    if(txtPib.getText().trim().length()<=300&&txtReligion.getText().trim().length()<=100&&txtEducation.getText().trim().length()<=255 && txtBiog.getText().trim().length() < 16777215)
                    {
                    d.GetInfo("PIB", "personality",txtPib.getText());
                    d.Getid("PIB", "personality", txtPib.getText());
                    if(d.getAddName()=="Такого нема"||v.getIdDel()==d.getIdBranch())
                    {
                        int a = 0;  
                        if(lblPhoto.getText() == "Виберіть фото")
                        {
                          String[] btn = {"Так", "Ні"};
                            a= JOptionPane.showOptionDialog(rootPane, "Продовжити без фотографії?", "Вибір фотографії",
                         JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, btn, "OK");
                        }
                        
                        if(a==0)
                        {
                        if(lblPhoto.getText() == "Виберіть фото")
                        {
                            Photo = "Відсутнє";
                        }
                        if(jBoxBorn.isSelected()&&jBoxDead.isSelected())
                        {
                        d.Getid("name_branch", "branch", (String) JComboBoxBranch.getSelectedItem());
                        d.personUpdate("personality",""+d.getIdBranch()+"",txtPib.getText(),null,null,txtReligion.getText(),txtEducation.getText(),txtBiog.getText(),Photo,v.getIdDel());
                        JOptionPane.showMessageDialog(rootPane, "Успішно");
                        dispose();
                        v.Use();
                        }
                        else if(jBoxDead.isSelected())
                        {
                            d.Getid("name_branch", "branch", (String) JComboBoxBranch.getSelectedItem());
                        d.personUpdate("personality",""+d.getIdBranch()+"",txtPib.getText(),born,null,txtReligion.getText(),txtEducation.getText(),txtBiog.getText(),Photo,v.getIdDel());
                        JOptionPane.showMessageDialog(rootPane, "Успішно");
                        dispose();
                        v.Use();
                        }
                        else if(jBoxBorn.isSelected())
                        {
                            d.Getid("name_branch", "branch", (String) JComboBoxBranch.getSelectedItem());
                        d.personUpdate("personality",""+d.getIdBranch()+"",txtPib.getText(),null,dead,txtReligion.getText(),txtEducation.getText(),txtBiog.getText(),Photo,v.getIdDel());
                        JOptionPane.showMessageDialog(rootPane, "Успішно");
                       dispose();
                        v.Use();
                        }
                        else{
                        d.Getid("name_branch", "branch", (String) JComboBoxBranch.getSelectedItem());
                        d.personUpdate("personality",""+d.getIdBranch()+"",txtPib.getText(),born,dead,txtReligion.getText(),txtEducation.getText(),txtBiog.getText(),Photo,v.getIdDel());
                        JOptionPane.showMessageDialog(rootPane, "Оновлено");
                        dispose();
                        v.Use();
                        }
                    }
                        else{}
                    }
                    else{
                        JOptionPane.showMessageDialog(rootPane, "Така особистість вже існує");
                    }
                    }
                    else
                    {
                      JOptionPane.showMessageDialog(rootPane, "Введено багато символів, повторіть спробу"); 
                    }
                    
                }
        else{
                JOptionPane.showMessageDialog(rootPane, "Помилка даних");
        }
          
      }
    }//GEN-LAST:event_btnAddActionPerformed

    private void jBoxDeadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBoxDeadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBoxDeadActionPerformed
/**
 * Вихід
 * @param evt 
 */
    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
       dispose();
        v.Use();
        v.setStart(0);
    }//GEN-LAST:event_jLabel3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsertPerson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsertPerson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsertPerson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsertPerson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertPerson().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice JComboBoxBranch;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnSetPath;
    private java.awt.Choice chData;
    private java.awt.Choice chDataD;
    private java.awt.Choice chMount;
    private java.awt.Choice chMountD;
    private java.awt.Choice chYear;
    private java.awt.Choice chYearD;
    private javax.swing.JCheckBox jBoxBorn;
    private javax.swing.JCheckBox jBoxDead;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBorn;
    private javax.swing.JLabel lblDead;
    private javax.swing.JLabel lblEducation;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JLabel lblReligion;
    private javax.swing.JLabel lbl_biog;
    private javax.swing.JPanel pnlHead;
    private javax.swing.JPanel pnlPerson;
    private javax.swing.JTextArea txtBiog;
    private javax.swing.JTextField txtEducation;
    private javax.swing.JTextField txtPib;
    private javax.swing.JTextField txtReligion;
    // End of variables declaration//GEN-END:variables
}
